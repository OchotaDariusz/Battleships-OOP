@startuml
skinparam packageStyle rectangle

package com.codecool.battleship.ships {
  class Ship
  enum ShipType
}

package com.codecool.battleship.board {
  interface BoardFactory
  class Board implements BoardFactory
  Board *-- Square
  Square *-- SquareStatus
  enum SquareStatus
}

package com.codecool.battleship.players {
  abstract class AbstractPlayer
  class UserPlayer extends AbstractPlayer
  abstract class AbstractComputerPlayer extends AbstractPlayer
  class ComputerPlayerEasy extends AbstractComputerPlayer
  class ComputerPlayerNormal extends AbstractComputerPlayer
  class ComputerPlayerHard extends AbstractComputerPlayer
}

package com.codecool.battleship.io {
  class Display
  class Input
}

package com.codecool.battleship {
  Battleship *-- Display
  Battleship *-- Input
  class Battleship
}

class Battleship {
  -Display display
  -Input input
  -int gameMode
  -int gamePhase
  -int difficulty
  -AbstractPlayer[] players
  -Board emptyBoard
  -Board emptyBoard2
  -Board playerOneBoard
  -Board playerTwoBoard
  -List<ShipType> shipTypeList
  -int placementOption
  -int getGamePhase()
  -void setPlacementOption(int placementOption)
  -void setGamePhase(int gamePhase)
  -int getDifficulty()
  -void setDifficulty(String difficulty)
  -int getGameMode()
  -void setGameMode(int gameMode)
  -void mainLoop()
  -void displayMenu()
  +void startGame()
  -void displayHighScores(int playerId)
  -void exit()
  -boolean makeMove(Board board, int playerId, AbstractPlayer player)
  -void placementPhase(Board board, int playerId)
  -boolean checkIfWon(int playerId)
  -void chooseGameMode(Battleship battleship)
  -void chooseGameDifficulty()
  -void choosePlacementOption(Battleship battleship)
  -void setupPlayers()
}

class Display {
  +void printMenu()
  +void printPlacementOption()
  +void printBoard(Board board1, Board board2)
  -void printBoardHeaders(int boardSize)
  -void printBoardBody(Board board1, Board board2, int boardSize)
  -void printBoardBottom(int boardSize)
  +void printWinner(int playerId)
  +void print(String string)
}

class Input {
  -final Display display
  +String askForDirection()
  +String askForInput(String label)
  +int[] askForShootingCoords(String label, int boardSize)
  -boolean validateShoot(String coords, int boardSize)
  +boolean isDigit(String input)
  +boolean validateOption(String input)
  -boolean validateCords(String input, Board board, int boardSize, int shipLength)
  -boolean isOnBoard(int[] coords, int boardSize)
  -boolean isNotOccupied(Board board, int[] coords)
  +boolean isSpaceForHorizontal(int[] coords, Board board, int boardSize, int shipLength)
  +boolean isSpaceForVertical(int[] coords, Board board, int boardSize, int shipLength)
  -int[] convertCoords(String input)
  +int[] askForCords(String label, Board board, int boardSize, int shipSize)
}

abstract class AbstractPlayer {
  -List<Ship> ships
  +List<Ship> getShips()
  +void addShip(Ship ship)
  +boolean isAlive()
  +void setSquareToHit(int[] cords, Square[][] ocean, Square[][] emptyOcean, AbstractPlayer player)
  +boolean isShipSunked(Ship ship)
  +void removeShip(Ship ship, Square[][] ocean, Square[][] emptyOcean, AbstractPlayer player)
  +boolean makeMove(Board opponentBord, Board emptyBoard, int[] coords, AbstractPlayer opponent)
}

abstract class AbstractComputerPlayer {
  -List<int[]> usedFields
  -List<int[]> shootedFields
  -List<int[]> sunkenShipsFields
  -Random RANDOM
  +Random getRANDOM()
  +List<int[]> getShootedFields()
  +void clearHittedFields()
  +void addShootedFields(int[] coords)
  +void addSunkenShipsFields(int[] coords)
  +void addUsedField(int[] coords)
  +{abstract} int[] getRandomCoords(int boardSize)
  +boolean checkIfUsed(int[] coords)
  +void addToUsedFieldsAfterSunk()
}

interface BoardFactory {
  +void randomPlacement()
  +void manualPlacement()
}

class Board {
  -int BOARD_SIZE
  +int getBoardSize()
  -Square[][] ocean
  +Square[][] getOcean()
  +Board()
  +void randomPlacement(AbstractPlayer player, Board board, int shipSize, Input input)
  +void manualPlacement(AbstractPlayer player, Board board, int shipSize, Input input)
}

class Ship {
  -List<Square> coords
  -List<Square> coords
  +void addCords(Square square)
}

enum ShipType {
  CARRIER(1),
  CRUISER(2),
  BATTLESHIP(3),
  SUBMARINE(4),
  DESTROYER(5)

  -int shipLength
  +int getShipLength()
  ShipType(int length)
}

class Square {
  -int x
  -int y
  -SquareStatus squareStatus
  +void setSquareStatus(SquareStatus squareStatus)
  +SquareStatus getSquareStatus()
  +int getX()
  +int getY()
  +Square()
  +String toString()
}

enum SquareStatus {
  S_EMPTY(" "),
  S_SHIP("*"),
  S_HIT("x"),
  S_MISSED("o"),
  S_SUNK("S")

  +char getCharacter()
}

class ComputerPlayerEasy {
  +int[] getRandomCoords(int boardSize)
}

class ComputerPlayerNormal {
  +int[] getRandomCoords(int boardSize)
}

class ComputerPlayerHard {
  +int[] getRandomCoords(int boardSize)
  -int[] getNearFieldToShoot()
}

@enduml